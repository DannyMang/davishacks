{
  "path": "davishacks/source/cli.tsx",
  "lastUpdated": "2025-04-20T00:31:31.704Z",
  "content": "#!/usr/bin/env node\nimport React from 'react';\nimport {render} from 'ink';\nimport meow from 'meow';\nimport App from './app.js';\nimport { DocManager } from './services/DocManager.js';\n\nconst cli = meow(\n\t`\n\tUsage\n\t  $ davishacks [command]\n\n\tCommands\n\t\tbrowse          Browse and generate documentation interactively (default)\n\t\tgenerate        Generate documentation for changed files\n\n\tOptions\n\t\t--path  Path to the project directory (defaults to current directory)\n\n\tExamples\n\t  $ davishacks                    # Browse files interactively\n\t  $ davishacks generate          # Generate docs for changed files\n\t  $ davishacks --path=/path/to/project\n`,\n\t{\n\t\timportMeta: import.meta,\n\t\tflags: {\n\t\t\tpath: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: process.cwd()\n\t\t\t}\n\t\t}\n\t}\n);\n\nconst [command = 'browse'] = cli.input;\n\nasync function generateDocs(workspacePath: string) {\n\ttry {\n\t\tconsole.log('Generating documentation for changed files...');\n\t\tconst docManager = new DocManager(workspacePath);\n\t\tconst changedFiles = await docManager.getChangedFiles();\n\t\t\n\t\tif (changedFiles.length === 0) {\n\t\t\tconsole.log('No changed files found.');\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(`Found ${changedFiles.length} changed files.`);\n\t\tfor (const file of changedFiles) {\n\t\t\tconsole.log(`Processing ${file}...`);\n\t\t\tawait docManager.generateDocumentation(file);\n\t\t}\n\n\t\tawait docManager.generateHtml();\n\t\tconsole.log('Documentation generated successfully!');\n\t\tconsole.log('You can view the HTML documentation in docs/html/index.html');\n\t} catch (error) {\n\t\tconsole.error('Error generating documentation:', error);\n\t\tprocess.exit(1);\n\t}\n}\n\nif (command === 'generate') {\n\tgenerateDocs(cli.flags.path);\n} else {\n\trender(<App path={cli.flags.path} />);\n}\n",
  "summary": "This TypeScript (TSX) file is a command-line interface (CLI) application named `davishacks` for generating documentation, likely for code.\n\n**Main Purpose:**\n\nThe primary goal is to provide a tool for browsing and generating documentation, either interactively via a text-based user interface (TUI) or automatically for changed files within a project.\n\n**Key Functions:**\n\n*   **`meow` Initialization:**  Uses the `meow` library to parse command-line arguments and define the CLI's usage, commands (browse, generate), and options (e.g., `--path`). The `--path` flag specifies the project directory, defaulting to the current working directory.\n*   **Command Dispatch:** Determines which command to execute based on user input (defaulting to `browse`).\n*   **`generateDocs(workspacePath: string)`:**  This asynchronous function handles the `generate` command. It uses the `DocManager` service to:\n    *   Log messages to the console regarding progress.\n    *   Instantiate a `DocManager` with the specified workspace path.\n    *   Identify changed files using `docManager.getChangedFiles()`.\n    *   Generate documentation for each changed file using `docManager.generateDocumentation(file)`.\n    *   Generate an HTML version of the documentation using `docManager.generateHtml()`.\n    *   Provide output on successful generation or errors.\n*   **`render(<App path={cli.flags.path} />)`:** If the command is not `generate` (implicitly `browse`), it renders a React component named `App` using the `ink` library. This component likely provides the interactive browsing functionality.\n\n**Important Details:**\n\n*   **`DocManager`:** This service (defined in `./services/DocManager.js`) is responsible for the core documentation generation logic, including identifying changed files, processing files, and generating the final output (likely markdown files and HTML for viewing in a browser).  The exact implementation details are hidden, but the code shows it has `getChangedFiles()`, `generateDocumentation(file)`, and `generateHtml()` methods.\n*   **`ink` Library:**  `ink` is a library for building interactive command-line applications using React. It's used to render the `App` component.\n*   **Error Handling:**  The `generateDocs` function includes `try...catch` block to handle potential errors during documentation generation and exit the process with an error code if something goes wrong.\n*   **Dependency on React:** The file uses react to render the UI, so it depends on React.\n",
  "type": "tsx",
  "hash": "5421d47c0b401b0fa1ef92de6ebb8251cd3d7ee3"
}