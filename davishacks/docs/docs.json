{
  "version": "1.0.0",
  "lastUpdated": "2025-04-20T05:28:03.370Z",
  "files": {
    "davishacks/api/flash.ts": {
      "path": "davishacks/api/flash.ts",
      "lastUpdated": "2025-04-19T23:54:57.533Z",
      "content": "import { GoogleGenAI } from \"@google/genai\";\nimport * as dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport path from 'path';\n\n// Get current file path in ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Load environment variables from .env file\ndotenv.config({ path: path.resolve(__dirname, '../.env') });\n\nconst apiKey = process.env.GOOGLE_API_KEY;\nif (!apiKey) {\n    throw new Error('GOOGLE_API_KEY is not set in environment variables');\n}\n\n// Initialize the model\nconst genAI =  new GoogleGenAI({ apiKey: apiKey });\n\nasync function main() {\n    try {\n        // For text-only input, use the gemini-pro model\n        const response = await genAI.models.generateContent({\n            model: \"gemini-2.0-flash\",\n            contents: \"What is Windsurf?\"\n        })\n        \n        const result = await response.text\n        console.log(\"Response:\", result);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nmain();",
      "summary": "This TypeScript code file utilizes the `@google/genai` library to interact with Google's Gemini AI model, specifically `gemini-2.0-flash`, to generate text responses based on text prompts.\n\n**Main Purpose:**\nThe primary purpose of the file is to send a text prompt \"What is Windsurf?\" to the Gemini model and print the generated text response to the console.\n\n**Key Functions:**\n\n*   **`main()` (async function):** This is the main asynchronous function that orchestrates the interaction with the Gemini AI.\n    *   It initializes the `GoogleGenAI` client using an API key fetched from environment variables.\n    *   It sends the text prompt \"What is Windsurf?\" to the `gemini-2.0-flash` model using `genAI.models.generateContent`.\n    *   It extracts the generated text from the response using `.text` and logs it to the console.\n    *   It includes error handling with a `try...catch` block to log any errors encountered during the process.\n\n**Important Details:**\n\n*   **Environment Variable Handling:** The code loads the Google API key from a `.env` file located one directory level above the current file (`../.env`).  It checks if the `GOOGLE_API_KEY` environment variable is set and throws an error if it's not.\n*   **Model Selection:** It specifically uses the `gemini-2.0-flash` model for text generation.\n*   **ES Module Compatibility:** The code is written using ES module syntax (`import`, `export`) and uses `fileURLToPath` and `dirname` to get the current file's directory path for loading environment variables.\n*   **Error Handling:** Includes a basic `try...catch` block to handle potential errors during the API call and log them to the console.\n",
      "type": "ts",
      "hash": "707dd1d1ea764b26bc9ca463105d2e138ad4574b"
    },
    "davishacks/source/cli.tsx": {
      "path": "davishacks/source/cli.tsx",
      "lastUpdated": "2025-04-20T00:31:31.704Z",
      "content": "#!/usr/bin/env node\nimport React from 'react';\nimport {render} from 'ink';\nimport meow from 'meow';\nimport App from './app.js';\nimport { DocManager } from './services/DocManager.js';\n\nconst cli = meow(\n\t`\n\tUsage\n\t  $ davishacks [command]\n\n\tCommands\n\t\tbrowse          Browse and generate documentation interactively (default)\n\t\tgenerate        Generate documentation for changed files\n\n\tOptions\n\t\t--path  Path to the project directory (defaults to current directory)\n\n\tExamples\n\t  $ davishacks                    # Browse files interactively\n\t  $ davishacks generate          # Generate docs for changed files\n\t  $ davishacks --path=/path/to/project\n`,\n\t{\n\t\timportMeta: import.meta,\n\t\tflags: {\n\t\t\tpath: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: process.cwd()\n\t\t\t}\n\t\t}\n\t}\n);\n\nconst [command = 'browse'] = cli.input;\n\nasync function generateDocs(workspacePath: string) {\n\ttry {\n\t\tconsole.log('Generating documentation for changed files...');\n\t\tconst docManager = new DocManager(workspacePath);\n\t\tconst changedFiles = await docManager.getChangedFiles();\n\t\t\n\t\tif (changedFiles.length === 0) {\n\t\t\tconsole.log('No changed files found.');\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(`Found ${changedFiles.length} changed files.`);\n\t\tfor (const file of changedFiles) {\n\t\t\tconsole.log(`Processing ${file}...`);\n\t\t\tawait docManager.generateDocumentation(file);\n\t\t}\n\n\t\tawait docManager.generateHtml();\n\t\tconsole.log('Documentation generated successfully!');\n\t\tconsole.log('You can view the HTML documentation in docs/html/index.html');\n\t} catch (error) {\n\t\tconsole.error('Error generating documentation:', error);\n\t\tprocess.exit(1);\n\t}\n}\n\nif (command === 'generate') {\n\tgenerateDocs(cli.flags.path);\n} else {\n\trender(<App path={cli.flags.path} />);\n}\n",
      "summary": "This TypeScript (TSX) file is a command-line interface (CLI) application named `davishacks` for generating documentation, likely for code.\n\n**Main Purpose:**\n\nThe primary goal is to provide a tool for browsing and generating documentation, either interactively via a text-based user interface (TUI) or automatically for changed files within a project.\n\n**Key Functions:**\n\n*   **`meow` Initialization:**  Uses the `meow` library to parse command-line arguments and define the CLI's usage, commands (browse, generate), and options (e.g., `--path`). The `--path` flag specifies the project directory, defaulting to the current working directory.\n*   **Command Dispatch:** Determines which command to execute based on user input (defaulting to `browse`).\n*   **`generateDocs(workspacePath: string)`:**  This asynchronous function handles the `generate` command. It uses the `DocManager` service to:\n    *   Log messages to the console regarding progress.\n    *   Instantiate a `DocManager` with the specified workspace path.\n    *   Identify changed files using `docManager.getChangedFiles()`.\n    *   Generate documentation for each changed file using `docManager.generateDocumentation(file)`.\n    *   Generate an HTML version of the documentation using `docManager.generateHtml()`.\n    *   Provide output on successful generation or errors.\n*   **`render(<App path={cli.flags.path} />)`:** If the command is not `generate` (implicitly `browse`), it renders a React component named `App` using the `ink` library. This component likely provides the interactive browsing functionality.\n\n**Important Details:**\n\n*   **`DocManager`:** This service (defined in `./services/DocManager.js`) is responsible for the core documentation generation logic, including identifying changed files, processing files, and generating the final output (likely markdown files and HTML for viewing in a browser).  The exact implementation details are hidden, but the code shows it has `getChangedFiles()`, `generateDocumentation(file)`, and `generateHtml()` methods.\n*   **`ink` Library:**  `ink` is a library for building interactive command-line applications using React. It's used to render the `App` component.\n*   **Error Handling:**  The `generateDocs` function includes `try...catch` block to handle potential errors during documentation generation and exit the process with an error code if something goes wrong.\n*   **Dependency on React:** The file uses react to render the UI, so it depends on React.\n",
      "type": "tsx",
      "hash": "5421d47c0b401b0fa1ef92de6ebb8251cd3d7ee3"
    },
    "davishacks/README.md": {
      "path": "davishacks/README.md",
      "lastUpdated": "2025-04-20T00:31:52.242Z",
      "content": "# davishacks\n\n> This readme is automatically generated by [create-ink-app](https://github.com/vadimdemedes/create-ink-app)\n\n## Install\n\n```bash\n$ npm install --global davishacks\n```\n\n## CLI\n\n```\n$ davishacks --help\n\n  Usage\n    $ davishacks\n\n  Options\n    --name  Your name\n\n  Examples\n    $ davishacks --name=Jane\n    Hello, Jane\n```\n",
      "summary": "This `md` file serves as a README for the `davishacks` CLI tool, providing usage instructions and documentation.\n\n*   **Purpose:** To describe the installation, usage, and options of the `davishacks` command-line interface (CLI) tool.\n*   **Methods/Functions (implied through CLI usage):**\n    *   `davishacks`: The main function executed when the CLI is invoked, likely taking options and printing a greeting.\n*   **Key Data Structures/Types:**\n    *   `--name`: An option that expects a string value representing a user's name.\n",
      "type": "md",
      "hash": "5421d47c0b401b0fa1ef92de6ebb8251cd3d7ee3",
      "preview": "# davishacks\n\n> This readme is automatically generated by [create-ink-app](https://github.com/vadimdemedes/create-ink-app)\n\n## Install\n..."
    },
    "davishacks/docs/docs.json": {
      "path": "davishacks/docs/docs.json",
      "lastUpdated": "2025-04-20T05:28:03.345Z",
      "content": "{\n\t\"version\": \"1.0.0\",\n\t\"lastUpdated\": \"2025-04-20T00:31:31.716Z\",\n\t\"files\": {\n\t\t\"davishacks/api/flash.ts\": {\n\t\t\t\"path\": \"davishacks/api/flash.ts\",\n\t\t\t\"lastUpdated\": \"2025-04-19T23:54:57.533Z\",\n\t\t\t\"content\": \"import { GoogleGenAI } from \\\"@google/genai\\\";\\nimport * as dotenv from 'dotenv';\\nimport { fileURLToPath } from 'url';\\nimport { dirname } from 'path';\\nimport path from 'path';\\n\\n// Get current file path in ES modules\\nconst __filename = fileURLToPath(import.meta.url);\\nconst __dirname = dirname(__filename);\\n\\n// Load environment variables from .env file\\ndotenv.config({ path: path.resolve(__dirname, '../.env') });\\n\\nconst apiKey = process.env.GOOGLE_API_KEY;\\nif (!apiKey) {\\n    throw new Error('GOOGLE_API_KEY is not set in environment variables');\\n}\\n\\n// Initialize the model\\nconst genAI =  new GoogleGenAI({ apiKey: apiKey });\\n\\nasync function main() {\\n    try {\\n        // For text-only input, use the gemini-pro model\\n        const response = await genAI.models.generateContent({\\n            model: \\\"gemini-2.0-flash\\\",\\n            contents: \\\"What is Windsurf?\\\"\\n        })\\n        \\n        const result = await response.text\\n        console.log(\\\"Response:\\\", result);\\n    } catch (error) {\\n        console.error(\\\"Error:\\\", error);\\n    }\\n}\\n\\nmain();\",\n\t\t\t\"summary\": \"This TypeScript code file utilizes the `@google/genai` library to interact with Google's Gemini AI model, specifically `gemini-2.0-flash`, to generate text responses based on text prompts.\\n\\n**Main Purpose:**\\nThe primary purpose of the file is to send a text prompt \\\"What is Windsurf?\\\" to the Gemini model and print the generated text response to the console.\\n\\n**Key Functions:**\\n\\n*   **`main()` (async function):** This is the main asynchronous function that orchestrates the interaction with the Gemini AI.\\n    *   It initializes the `GoogleGenAI` client using an API key fetched from environment variables.\\n    *   It sends the text prompt \\\"What is Windsurf?\\\" to the `gemini-2.0-flash` model using `genAI.models.generateContent`.\\n    *   It extracts the generated text from the response using `.text` and logs it to the console.\\n    *   It includes error handling with a `try...catch` block to log any errors encountered during the process.\\n\\n**Important Details:**\\n\\n*   **Environment Variable Handling:** The code loads the Google API key from a `.env` file located one directory level above the current file (`../.env`).  It checks if the `GOOGLE_API_KEY` environment variable is set and throws an error if it's not.\\n*   **Model Selection:** It specifically uses the `gemini-2.0-flash` model for text generation.\\n*   **ES Module Compatibility:** The code is written using ES module syntax (`import`, `export`) and uses `fileURLToPath` and `dirname` to get the current file's directory path for loading environment variables.\\n*   **Error Handling:** Includes a basic `try...catch` block to handle potential errors during the API call and log them to the console.\\n\",\n\t\t\t\"type\": \"ts\",\n\t\t\t\"hash\": \"707dd1d1ea764b26bc9ca463105d2e138ad4574b\"\n\t\t},\n\t\t\"davishacks/source/cli.tsx\": {\n\t\t\t\"path\": \"davishacks/source/cli.tsx\",\n\t\t\t\"lastUpdated\": \"2025-04-20T00:31:31.704Z\",\n\t\t\t\"content\": \"#!/usr/bin/env node\\nimport React from 'react';\\nimport {render} from 'ink';\\nimport meow from 'meow';\\nimport App from './app.js';\\nimport { DocManager } from './services/DocManager.js';\\n\\nconst cli = meow(\\n\\t`\\n\\tUsage\\n\\t  $ davishacks [command]\\n\\n\\tCommands\\n\\t\\tbrowse          Browse and generate documentation interactively (default)\\n\\t\\tgenerate        Generate documentation for changed files\\n\\n\\tOptions\\n\\t\\t--path  Path to the project directory (defaults to current directory)\\n\\n\\tExamples\\n\\t  $ davishacks                    # Browse files interactively\\n\\t  $ davishacks generate          # Generate docs for changed files\\n\\t  $ davishacks --path=/path/to/project\\n`,\\n\\t{\\n\\t\\timportMeta: import.meta,\\n\\t\\tflags: {\\n\\t\\t\\tpath: {\\n\\t\\t\\t\\ttype: 'string',\\n\\t\\t\\t\\tdefault: process.cwd()\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n);\\n\\nconst [command = 'browse'] = cli.input;\\n\\nasync function generateDocs(workspacePath: string) {\\n\\ttry {\\n\\t\\tconsole.log('Generating documentation for changed files...');\\n\\t\\tconst docManager = new DocManager(workspacePath);\\n\\t\\tconst changedFiles = await docManager.getChangedFiles();\\n\\t\\t\\n\\t\\tif (changedFiles.length === 0) {\\n\\t\\t\\tconsole.log('No changed files found.');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconsole.log(`Found ${changedFiles.length} changed files.`);\\n\\t\\tfor (const file of changedFiles) {\\n\\t\\t\\tconsole.log(`Processing ${file}...`);\\n\\t\\t\\tawait docManager.generateDocumentation(file);\\n\\t\\t}\\n\\n\\t\\tawait docManager.generateHtml();\\n\\t\\tconsole.log('Documentation generated successfully!');\\n\\t\\tconsole.log('You can view the HTML documentation in docs/html/index.html');\\n\\t} catch (error) {\\n\\t\\tconsole.error('Error generating documentation:', error);\\n\\t\\tprocess.exit(1);\\n\\t}\\n}\\n\\nif (command === 'generate') {\\n\\tgenerateDocs(cli.flags.path);\\n} else {\\n\\trender(<App path={cli.flags.path} />);\\n}\\n\",\n\t\t\t\"summary\": \"This TypeScript (TSX) file is a command-line interface (CLI) application named `davishacks` for generating documentation, likely for code.\\n\\n**Main Purpose:**\\n\\nThe primary goal is to provide a tool for browsing and generating documentation, either interactively via a text-based user interface (TUI) or automatically for changed files within a project.\\n\\n**Key Functions:**\\n\\n*   **`meow` Initialization:**  Uses the `meow` library to parse command-line arguments and define the CLI's usage, commands (browse, generate), and options (e.g., `--path`). The `--path` flag specifies the project directory, defaulting to the current working directory.\\n*   **Command Dispatch:** Determines which command to execute based on user input (defaulting to `browse`).\\n*   **`generateDocs(workspacePath: string)`:**  This asynchronous function handles the `generate` command. It uses the `DocManager` service to:\\n    *   Log messages to the console regarding progress.\\n    *   Instantiate a `DocManager` with the specified workspace path.\\n    *   Identify changed files using `docManager.getChangedFiles()`.\\n    *   Generate documentation for each changed file using `docManager.generateDocumentation(file)`.\\n    *   Generate an HTML version of the documentation using `docManager.generateHtml()`.\\n    *   Provide output on successful generation or errors.\\n*   **`render(<App path={cli.flags.path} />)`:** If the command is not `generate` (implicitly `browse`), it renders a React component named `App` using the `ink` library. This component likely provides the interactive browsing functionality.\\n\\n**Important Details:**\\n\\n*   **`DocManager`:** This service (defined in `./services/DocManager.js`) is responsible for the core documentation generation logic, including identifying changed files, processing files, and generating the final output (likely markdown files and HTML for viewing in a browser).  The exact implementation details are hidden, but the code shows it has `getChangedFiles()`, `generateDocumentation(file)`, and `generateHtml()` methods.\\n*   **`ink` Library:**  `ink` is a library for building interactive command-line applications using React. It's used to render the `App` component.\\n*   **Error Handling:**  The `generateDocs` function includes `try...catch` block to handle potential errors during documentation generation and exit the process with an error code if something goes wrong.\\n*   **Dependency on React:** The file uses react to render the UI, so it depends on React.\\n\",\n\t\t\t\"type\": \"tsx\",\n\t\t\t\"hash\": \"5421d47c0b401b0fa1ef92de6ebb8251cd3d7ee3\"\n\t\t},\n\n\t\t\"davishacks/README.md\": {\n\t\t\t\"path\": \"davishacks/README.md\",\n\t\t\t\"lastUpdated\": \"2025-04-20T00:31:52.242Z\",\n\t\t\t\"content\": \"# davishacks\\n\\n> This readme is automatically generated by [create-ink-app](https://github.com/vadimdemedes/create-ink-app)\\n\\n## Install\\n\\n```bash\\n$ npm install --global davishacks\\n```\\n\\n## CLI\\n\\n```\\n$ davishacks --help\\n\\n  Usage\\n    $ davishacks\\n\\n  Options\\n    --name  Your name\\n\\n  Examples\\n    $ davishacks --name=Jane\\n    Hello, Jane\\n```\\n\",\n\t\t\t\"summary\": \"This `md` file serves as a README for the `davishacks` CLI tool, providing usage instructions and documentation.\\n\\n*   **Purpose:** To describe the installation, usage, and options of the `davishacks` command-line interface (CLI) tool.\\n*   **Methods/Functions (implied through CLI usage):**\\n    *   `davishacks`: The main function executed when the CLI is invoked, likely taking options and printing a greeting.\\n*   **Key Data Structures/Types:**\\n    *   `--name`: An option that expects a string value representing a user's name.\\n\",\n\t\t\t\"type\": \"md\",\n\t\t\t\"hash\": \"5421d47c0b401b0fa1ef92de6ebb8251cd3d7ee3\",\n\t\t\t\"preview\": \"# davishacks\\n\\n> This readme is automatically generated by [create-ink-app](https://github.com/vadimdemedes/create-ink-app)\\n\\n## Install\\n...\"\n\t\t}\n\t}\n}\n",
      "summary": "```json\n{\n  \"version\": \"1.0.0\",\n  \"lastUpdated\": \"2025-04-20T00:31:31.716Z\",\n  \"files\": {\n    \"davishacks/api/flash.ts\": {\n      \"purpose\": \"Interact with Google's Gemini AI model to generate text responses.\",\n      \"functions\": [\n        \"main(): Sends a text prompt to the Gemini model and prints the response.\"\n      ],\n      \"data_structures\": [\n        \"GoogleGenAI: Instance to interact with the Gemini model.\",\n\t\t\"string\": API Key.\"\n      ]\n    },\n    \"davishacks/source/cli.tsx\": {\n      \"purpose\": \"Command-line interface for browsing and generating documentation.\",\n      \"functions\": [\n        \"generateDocs(workspacePath: string): Generates documentation for changed files using DocManager.\"\n      ],\n      \"data_structures\": [\n        \"meow: Parses command-line arguments.\",\n        \"DocManager: Handles documentation generation logic.\",\n        \"App (React Component): Provides the interactive browsing functionality.\"\n      ]\n    },\n    \"davishacks/README.md\": {\n      \"purpose\": \"README for the davishacks CLI tool, providing usage instructions.\",\n      \"functions\": [\n        \"davishacks: the main entry point of CLI.\"\n      ],\n      \"data_structures\": [\n        \"--name: option to pass a username\"\n      ]\n    }\n  }\n}\n```",
      "type": "json",
      "hash": "cf8a9486afd1fe130af445b5f15ae1a1b4e61d10",
      "preview": "{\n\t\"version\": \"1.0.0\",\n\t\"lastUpdated\": \"2025-04-20T00:31:31.716Z\",\n\t\"files\": {\n\t\t\"davishacks/api/flash.ts\": {\n..."
    }
  }
}