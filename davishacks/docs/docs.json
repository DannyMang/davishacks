{
  "version": "1.0.0",
  "lastUpdated": "2025-04-19T23:54:57.557Z",
  "files": {
    "davishacks/api/flash.ts": {
      "path": "davishacks/api/flash.ts",
      "lastUpdated": "2025-04-19T23:54:57.533Z",
      "content": "import { GoogleGenAI } from \"@google/genai\";\nimport * as dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport path from 'path';\n\n// Get current file path in ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Load environment variables from .env file\ndotenv.config({ path: path.resolve(__dirname, '../.env') });\n\nconst apiKey = process.env.GOOGLE_API_KEY;\nif (!apiKey) {\n    throw new Error('GOOGLE_API_KEY is not set in environment variables');\n}\n\n// Initialize the model\nconst genAI =  new GoogleGenAI({ apiKey: apiKey });\n\nasync function main() {\n    try {\n        // For text-only input, use the gemini-pro model\n        const response = await genAI.models.generateContent({\n            model: \"gemini-2.0-flash\",\n            contents: \"What is Windsurf?\"\n        })\n        \n        const result = await response.text\n        console.log(\"Response:\", result);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nmain();",
      "summary": "This TypeScript code file utilizes the `@google/genai` library to interact with Google's Gemini AI model, specifically `gemini-2.0-flash`, to generate text responses based on text prompts.\n\n**Main Purpose:**\nThe primary purpose of the file is to send a text prompt \"What is Windsurf?\" to the Gemini model and print the generated text response to the console.\n\n**Key Functions:**\n\n*   **`main()` (async function):** This is the main asynchronous function that orchestrates the interaction with the Gemini AI.\n    *   It initializes the `GoogleGenAI` client using an API key fetched from environment variables.\n    *   It sends the text prompt \"What is Windsurf?\" to the `gemini-2.0-flash` model using `genAI.models.generateContent`.\n    *   It extracts the generated text from the response using `.text` and logs it to the console.\n    *   It includes error handling with a `try...catch` block to log any errors encountered during the process.\n\n**Important Details:**\n\n*   **Environment Variable Handling:** The code loads the Google API key from a `.env` file located one directory level above the current file (`../.env`).  It checks if the `GOOGLE_API_KEY` environment variable is set and throws an error if it's not.\n*   **Model Selection:** It specifically uses the `gemini-2.0-flash` model for text generation.\n*   **ES Module Compatibility:** The code is written using ES module syntax (`import`, `export`) and uses `fileURLToPath` and `dirname` to get the current file's directory path for loading environment variables.\n*   **Error Handling:** Includes a basic `try...catch` block to handle potential errors during the API call and log them to the console.\n",
      "type": "ts",
      "hash": "707dd1d1ea764b26bc9ca463105d2e138ad4574b"
    }
  }
}